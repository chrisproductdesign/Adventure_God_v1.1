# Adventure_God v1.1 - Essential Workflow Rules

## Session Ritual (ALWAYS DO FIRST)
1. Read `docs/00_project_charter.md` for vision & scope
2. Read `docs/20_contracts.md` for technical contracts  
3. Read `docs/30_backlog.md` for current progress
4. Restate your plan in 2-4 bullets before making edits

## Core Workflow Rules
- **Keep diffs small**: One logical change per commit with manual test steps
- **Contracts are source of truth**: Update `docs/20_contracts.md` + run `npm run check:contracts` if changing schemas
- **No secrets or heavy packages** without justification & docs
- **Git workflow**: Check change count with `git status --porcelain | wc -l` before pushing

## Environment Management (CRITICAL)
- **Kill port conflicts**: `lsof -ti:8787 | xargs -r kill -9` before starting gateway
- **Check Unity compilation** errors in console before proceeding
- **Use nohup for gateway**: `nohup npx ts-node src/index.ts > /tmp/gateway.log 2>&1 &`

## Unity Integration (NEW)
- **Use Unity Editor menu "Cursor/"** for scene info, validation, and component docs
- **Run headless tests**: `./scripts/cursor_unity_integration.sh test`
- **Check project setup**: `./scripts/cursor_unity_integration.sh check`
- **Generate reports**: `./scripts/cursor_unity_integration.sh report`

## Game Director Workflow (NEW)
- **Generate dashboard**: `./scripts/game_director_dashboard.sh dashboard`
- **Preview build**: `./scripts/game_director_dashboard.sh preview`
- **Start development**: `./scripts/game_director_dashboard.sh dev`
- **Automated implementation**: `./scripts/automated_development.sh workflow`
- **Creative feedback**: Update `docs/creative_feedback.md` for technical implementation

## Architecture (Reference Only)
- `gateway/` (Node + TypeScript + Zod) exposes `ws://127.0.0.1:8787`
- `unity/` (URP) renders, simulates, executes actions via `BrainClient`
- Two contracts: `PerceptionEvent` (Unity→Gateway), `IntentProposal` (Gateway→Unity)

## Quick Manual Test
1. Start gateway: `cd gateway && npm run dev`
2. Send test: `npx ts-node scripts/send_demo.ts`  
3. Unity Play: Open Unity, press Play, test DM workflow
4. Verify: Dice rolls, candidate selection, save/load work

## Reference Documents
- **Vision & Scope**: `docs/00_project_charter.md`
- **Technical Contracts**: `docs/20_contracts.md`
- **Current Progress**: `docs/30_backlog.md`
- **Testing Strategy**: `docs/40_testing_strategy.md`
- **Performance Guidelines**: `docs/50_performance_guidelines.md`
- **Documentation Strategy**: `docs/60_documentation_strategy.md`
- **Feature Development**: `docs/70_feature_development.md`
- **Document Hierarchy**: `docs/80_document_hierarchy.md`
- **Unity Integration**: `.cursor/rules/04-unity-integration.mdc`
- **Game Director Workflow**: `.cursor/rules/05-game-director-workflow.mdc`

